name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run code formatting check
      run: |
        pip install black
        black --check .

    - name: Run linting
      run: |
        pip install flake8
        flake8 .

    - name: Run type checking
      run: |
        pip install mypy
        mypy .

    - name: Run tests
      run: |
        pip install pytest pytest-cov
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-learning-assistant:latest
          ${{ secrets.DOCKER_USERNAME }}/ai-learning-assistant:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # 这里可以添加实际的部署脚本
        # 例如：kubectl apply, docker-compose up, etc.

    - name: Send deployment notification
      run: |
        echo "Deployment completed successfully!"

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan]

    steps:
    - name: Quality Gate Check
      run: |
        echo "All quality checks passed!"
        echo "✅ Code formatting"
        echo "✅ Linting"
        echo "✅ Type checking"
        echo "✅ Tests"
        echo "✅ Security scan"
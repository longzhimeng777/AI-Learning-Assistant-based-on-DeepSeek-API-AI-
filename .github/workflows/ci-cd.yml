name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, dev ]
  pull_request:
    branches: [ main, staging, dev ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run code formatting check
      run: |
        pip install black
        black --check .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    - name: Run type checking
      run: |
        pip install mypy
        mypy app.py tests

    - name: Run tests
      run: |
        pip install pytest pytest-cov
        export PYTHONPATH=.
        pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image to GHCR
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ghcr.io/${{ github.repository_owner }}/ai-learning-assistant:${{ github.sha }}
          ${{ github.ref_name == 'main' && format('ghcr.io/{0}/ai-learning-assistant:latest', github.repository_owner) || '' }}
          ${{ github.ref_name == 'staging' && format('ghcr.io/{0}/ai-learning-assistant:staging', github.repository_owner) || '' }}
          ${{ github.ref_name == 'dev' && format('ghcr.io/{0}/ai-learning-assistant:dev', github.repository_owner) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # 这里可以添加实际的部署脚本
        # 例如：kubectl apply, docker-compose up, etc.

    - name: Send deployment notification
      run: |
        echo "Deployment completed successfully!"

  mlops-smoke-train:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run MLflow smoke training (autosample)
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        python ml/train.py --exp ai-learning-intent --autosample --max_iter 100

  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, security-scan, mlops-smoke-train]

    steps:
    - name: Quality Gate Check
      run: |
        echo "All quality checks passed!"
        echo "✅ Code formatting"
        echo "✅ Linting"
        echo "✅ Type checking"
        echo "✅ Tests"
        echo "✅ Security scan"
        echo "✅ MLOps smoke train"